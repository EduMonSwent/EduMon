package com.android.sample.data

import android.content.Context
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.stringPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import kotlin.collections.indexOfFirst
import kotlin.collections.plusAssign
import kotlin.collections.sortedByDescending
import kotlin.collections.take
import kotlin.collections.toMutableList
import kotlinx.coroutines.flow.first
import org.json.JSONArray
import org.json.JSONObject

// Some parts of this code were generated by AI.
private val Context.moodDataStore by preferencesDataStore(name = "mood_store")

private object Keys {
  val ENTRIES_JSON: Preferences.Key<String> = stringPreferencesKey("mood_entries_json")
}

/**
 * Handles low-level storage of mood entries using Android DataStore.
 *
 * All entries are saved as a single JSON string under one key.
 */
class MoodStorage(private val context: Context) {

  /** Reads all mood entries from DataStore. The JSON text is converted into a List<MoodEntry>. */
  suspend fun readAll(): List<MoodEntry> {
    val prefs = context.moodDataStore.data.first()
    val raw = prefs[Keys.ENTRIES_JSON] ?: "[]"
    return raw.toMoodList()
  }

  /**
   * Inserts or updates (upsert = update or insert) a mood entry for a given date. Keeps only the
   * most recent 60 entries for space efficiency.
   */
  suspend fun upsert(entry: MoodEntry) {
    val current = readAll().toMutableList()
    val idx = current.indexOfFirst { it.dateEpochDay == entry.dateEpochDay }
    if (idx >= 0) current[idx] = entry else current += entry
    val sorted = current.sortedByDescending { it.dateEpochDay }.take(60)
    val json = sorted.toJsonString()
    context.moodDataStore.edit { it[Keys.ENTRIES_JSON] = json }
  }
}

// Helper functions for JSON conversion

/** Converts a list of MoodEntry objects into a JSON array string. */
private fun List<MoodEntry>.toJsonString(): String {
  val arr = JSONArray()
  for (e in this) {
    val o = JSONObject()
    o.put("d", e.dateEpochDay) // store date
    o.put("m", e.mood) // store mood value
    o.put("n", e.note) // store note text
    arr.put(o)
  }
  return arr.toString()
}

/**
 * Converts a JSON string back into a list of MoodEntry objects. If the JSON is invalid or empty,
 * returns an empty list.
 */
private fun String.toMoodList(): List<MoodEntry> {
  return try {
    val arr = JSONArray(this)
    // Build a list by reading each JSON object
    List(arr.length()) { i ->
      val o = arr.getJSONObject(i)
      MoodEntry(
          dateEpochDay = o.optLong("d", 0L), mood = o.optInt("m", 0), note = o.optString("n", ""))
    }
  } catch (_: Exception) {
    // Return an empty list if parsing fails
    emptyList()
  }
}
